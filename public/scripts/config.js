'use strict';

angular.module('scraper', ['ui.router', 'angularFileUpload', 'ngSanitize', 'ngCsv']).config(function ($stateProvider, $urlRouterProvider) {

	// $urlRouterProvider.when('', 'home');
	// $urlRouterProvider.otherwise('/home')

	$stateProvider.state('index', {
		url: "/home",
		templateUrl: "./assets/landing.html"
	}).state('tnt', {
		url: "/tnt",
		templateUrl: './assets/radio.html',
		abstract: true
	}).state('tnt.view', {
		url: '/other',
		views: {
			'tnt': {
				templateUrl: './assets/tnt.html',
				controller: 'tnt',
				controllerAs: 'tnt'
			},
			'tntlast': {
				templateUrl: './assets/tntlast.html',
				controller: 'tntlast',
				controllerAs: 'tntlast'
			}
		}
	}).state('startrack', {
		url: "/startrack",
		templateUrl: "./assets/startrack.html",
		controller: "startrack",
		controllerAs: "startrack"
	});
}).factory('Add', function ($http, $location, $rootScope) {
	return {

		ship: function shipFile(data) {
			console.log('DATA COMING IN');
			console.log(data);
			return $http.post('/api/load', data).success(function (data) {
				console.log('DATA FIRED OUT');
				console.log(data);
			}).error(function (err) {
				console.info('error', err);
			});
		},
		exportExcel: function exportExcel() {
			$http({ method: 'GET', url: "/api/export",
				headers: { 'Content-Type': "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" },
				responseType: "arraybuffer" }).success(function (data, status, headers, config) {
				saveAs(new Blob([data], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" }), "excel111.xlsx");
			}).error(function (data, status, headers, config) {});
		}

	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2NvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FDTCxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUU3RSxNQUFNLENBQUMsVUFBUyxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7Ozs7O0FBS2xELGVBQWMsQ0FDWCxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ2QsS0FBRyxFQUFFLE9BQU87QUFDVixhQUFXLEVBQUUsdUJBQXVCO0VBQ3ZDLENBQUMsQ0FDRCxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxhQUFXLEVBQUUscUJBQXFCO0FBQ2xDLFVBQVEsRUFBRSxJQUFJO0VBQ2YsQ0FBQyxDQUNELEtBQUssQ0FBQyxVQUFVLEVBQUU7QUFDbEIsS0FBRyxFQUFFLFFBQVE7QUFDaEIsT0FBSyxFQUFFO0FBQ04sUUFBSyxFQUFFO0FBQ04sZUFBVyxFQUFFLG1CQUFtQjtBQUNoQyxjQUFVLEVBQUUsS0FBSztBQUNqQixnQkFBWSxFQUFFLEtBQUs7SUFDbkI7QUFDRCxZQUFTLEVBQUU7QUFDVixlQUFXLEVBQUUsdUJBQXVCO0FBQ3BDLGNBQVUsRUFBRSxTQUFTO0FBQ3JCLGdCQUFZLEVBQUUsU0FBUztJQUN2QjtHQUNEO0VBQ0UsQ0FBQyxDQUNELEtBQUssQ0FBQyxXQUFXLEVBQUU7QUFDbEIsS0FBRyxFQUFFLFlBQVk7QUFDZixhQUFXLEVBQUUseUJBQXlCO0FBQ3RDLFlBQVUsRUFBRSxXQUFXO0FBQ3ZCLGNBQVksRUFBRSxXQUFXO0VBQzVCLENBQUMsQ0FBQTtDQUNOLENBQUMsQ0FFRCxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUU7QUFDdkQsUUFBTzs7QUFFTixNQUFJLEVBQUUsU0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFO0FBQzdCLFVBQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM5QixVQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xCLFVBQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQzVELFdBQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM5QixXQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUU7QUFDdkIsV0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDMUIsQ0FBQyxDQUFDO0dBQ0g7QUFDRCxhQUFXLEVBQUUsdUJBQVk7QUFDeEIsUUFBSyxDQUFDLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsYUFBYTtBQUN4QyxXQUFPLEVBQUUsRUFBQyxjQUFjLEVBQUUsbUVBQW1FLEVBQUM7QUFDeEYsZ0JBQVksRUFBRSxhQUFhLEVBQUMsQ0FBQyxDQUM3QixPQUFPLENBQUMsVUFBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDNUMsVUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsbUVBQW1FLEVBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3hILENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFFdEQsQ0FBQyxDQUFDO0dBQ0g7O0VBRUQsQ0FBQztDQUNGLENBQUMsQ0FBQSIsImZpbGUiOiJjb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG5cdC5tb2R1bGUoJ3NjcmFwZXInLCBbICd1aS5yb3V0ZXInLCAnYW5ndWxhckZpbGVVcGxvYWQnLCAnbmdTYW5pdGl6ZScsICduZ0NzdiddKVxuXG5cdC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuXG5cdFx0Ly8gJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJycsICdob21lJyk7XG5cdFx0Ly8gJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2hvbWUnKVxuXG5cdCAgXHQkc3RhdGVQcm92aWRlclxuXHRcdCAgICAuc3RhdGUoJ2luZGV4Jywge1xuXHRcdCAgICAgIHVybDogXCIvaG9tZVwiLFxuICAgICAgXHRcdCAgdGVtcGxhdGVVcmw6IFwiLi9hc3NldHMvbGFuZGluZy5odG1sXCJcblx0XHQgICAgfSlcblx0XHQgICAgLnN0YXRlKCd0bnQnLCB7XG5cdFx0ICAgICAgdXJsOiBcIi90bnRcIixcblx0XHQgICAgICB0ZW1wbGF0ZVVybDogJy4vYXNzZXRzL3JhZGlvLmh0bWwnLFxuXHRcdCAgICAgIGFic3RyYWN0OiB0cnVlXG5cdFx0ICAgIH0pXG5cdFx0ICAgIC5zdGF0ZSgndG50LnZpZXcnLCB7XG5cdFx0ICAgIFx0dXJsOiAnL290aGVyJyxcblx0XHRcdFx0dmlld3M6IHtcblx0XHRcdFx0XHQndG50Jzoge1xuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICcuL2Fzc2V0cy90bnQuaHRtbCcsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAndG50Jyxcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3RudCdcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCd0bnRsYXN0Jzoge1xuXHRcdFx0XHRcdFx0dGVtcGxhdGVVcmw6ICcuL2Fzc2V0cy90bnRsYXN0Lmh0bWwnLFxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ3RudGxhc3QnLFxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAndG50bGFzdCdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHQgICAgfSlcblx0XHQgICAgLnN0YXRlKCdzdGFydHJhY2snLCB7XG5cdFx0ICAgICAgdXJsOiBcIi9zdGFydHJhY2tcIixcbiAgICAgIFx0XHQgIHRlbXBsYXRlVXJsOiBcIi4vYXNzZXRzL3N0YXJ0cmFjay5odG1sXCIsXG4gICAgICBcdFx0ICBjb250cm9sbGVyOiBcInN0YXJ0cmFja1wiLFxuICAgICAgXHRcdCAgY29udHJvbGxlckFzOiBcInN0YXJ0cmFja1wiXG5cdFx0ICAgIH0pXG5cdH0pXG5cblx0LmZhY3RvcnkoJ0FkZCcsIGZ1bmN0aW9uICgkaHR0cCwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKSB7XG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2hpcDogZnVuY3Rpb24gc2hpcEZpbGUoZGF0YSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnREFUQSBDT01JTkcgSU4nKTtcblx0XHRcdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2xvYWQnLCBkYXRhKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ0RBVEEgRklSRUQgT1VUJyk7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHRcdH0pLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRjb25zb2xlLmluZm8oJ2Vycm9yJywgZXJyKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHRleHBvcnRFeGNlbDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkaHR0cCh7bWV0aG9kOiAnR0VUJywgdXJsOiBcIi9hcGkvZXhwb3J0XCIsXG5cdFx0XHRcdGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFwifSxcblx0XHQgICAgICAgIHJlc3BvbnNlVHlwZTogXCJhcnJheWJ1ZmZlclwifSkuICAgICAgICAgICAgIFxuXHRcdCAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykgeyAgXG5cdFx0ICAgICAgICAgICAgc2F2ZUFzKG5ldyBCbG9iKFtkYXRhXSx7dHlwZTpcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0XCJ9KSwgXCJleGNlbDExMS54bHN4XCIpO1xuXHRcdCAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcblxuXHRcdFx0XHR9KTsgIFxuXHRcdFx0fVxuXG5cdFx0fTtcblx0fSlcblxuIl19
