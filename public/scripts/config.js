'use strict';

angular.module('scraper', ['ui.router', 'angularFileUpload', 'ngSanitize', 'ngCsv']).config(function ($stateProvider, $urlRouterProvider) {

	$urlRouterProvider.when('', '/home');
	$urlRouterProvider.otherwise('/home');

	$stateProvider.state('index', {
		url: "/home",
		templateUrl: "./assets/landing.html"
	}).state('tnt', {
		url: "/tnt",
		templateUrl: './assets/radio.html',
		abstract: true
	}).state('tnt.view', {
		url: '/other',
		views: {
			'tnt': {
				templateUrl: './assets/tnt.html',
				controller: 'tnt',
				controllerAs: 'tnt'
			},
			'tntlast': {
				templateUrl: './assets/tntlast.html',
				controller: 'tntlast',
				controllerAs: 'tntlast'
			}
		}
	}).state('startrack', {
		url: "/startrack",
		templateUrl: "./assets/startrack.html",
		controller: "startrack",
		controllerAs: "startrack"
	});
}).factory('Add', function ($http, $location, $rootScope) {
	return {

		ship: function shipFile(data) {
			console.log('DATA COMING IN');
			console.log(data);
			return $http.post('/api/load', data).success(function (data) {
				console.log('DATA FIRED OUT');
				console.log(data);
			}).error(function (err) {
				console.info('error', err);
			});
		},
		exportExcel: function exportExcel() {
			$http({ method: 'GET', url: "/api/export",
				headers: { 'Content-Type': "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" },
				responseType: "arraybuffer" }).success(function (data, status, headers, config) {
				saveAs(new Blob([data], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" }), "excel111.xlsx");
			}).error(function (data, status, headers, config) {});
		}

	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2NvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FDTCxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUU3RSxNQUFNLENBQUMsVUFBUyxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7O0FBRXBELG1CQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckMsbUJBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBOztBQUVuQyxlQUFjLENBQ1gsS0FBSyxDQUFDLE9BQU8sRUFBRTtBQUNkLEtBQUcsRUFBRSxPQUFPO0FBQ1YsYUFBVyxFQUFFLHVCQUF1QjtFQUN2QyxDQUFDLENBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRTtBQUNaLEtBQUcsRUFBRSxNQUFNO0FBQ1gsYUFBVyxFQUFFLHFCQUFxQjtBQUNsQyxVQUFRLEVBQUUsSUFBSTtFQUNmLENBQUMsQ0FDRCxLQUFLLENBQUMsVUFBVSxFQUFFO0FBQ2xCLEtBQUcsRUFBRSxRQUFRO0FBQ2hCLE9BQUssRUFBRTtBQUNOLFFBQUssRUFBRTtBQUNOLGVBQVcsRUFBRSxtQkFBbUI7QUFDaEMsY0FBVSxFQUFFLEtBQUs7QUFDakIsZ0JBQVksRUFBRSxLQUFLO0lBQ25CO0FBQ0QsWUFBUyxFQUFFO0FBQ1YsZUFBVyxFQUFFLHVCQUF1QjtBQUNwQyxjQUFVLEVBQUUsU0FBUztBQUNyQixnQkFBWSxFQUFFLFNBQVM7SUFDdkI7R0FDRDtFQUNFLENBQUMsQ0FDRCxLQUFLLENBQUMsV0FBVyxFQUFFO0FBQ2xCLEtBQUcsRUFBRSxZQUFZO0FBQ2YsYUFBVyxFQUFFLHlCQUF5QjtBQUN0QyxZQUFVLEVBQUUsV0FBVztBQUN2QixjQUFZLEVBQUUsV0FBVztFQUM1QixDQUFDLENBQUE7Q0FDTixDQUFDLENBRUQsT0FBTyxDQUFDLEtBQUssRUFBRSxVQUFVLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFO0FBQ3ZELFFBQU87O0FBRU4sTUFBSSxFQUFFLFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRTtBQUM3QixVQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDOUIsVUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQixVQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksRUFBRTtBQUM1RCxXQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDOUIsV0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQ3ZCLFdBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLENBQUMsQ0FBQztHQUNIO0FBQ0QsYUFBVyxFQUFFLHVCQUFZO0FBQ3hCLFFBQUssQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLGFBQWE7QUFDeEMsV0FBTyxFQUFFLEVBQUMsY0FBYyxFQUFFLG1FQUFtRSxFQUFDO0FBQ3hGLGdCQUFZLEVBQUUsYUFBYSxFQUFDLENBQUMsQ0FDN0IsT0FBTyxDQUFDLFVBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzVDLFVBQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUMsSUFBSSxFQUFDLG1FQUFtRSxFQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN4SCxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBRXRELENBQUMsQ0FBQztHQUNIOztFQUVELENBQUM7Q0FDRixDQUFDLENBQUEiLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuXHQubW9kdWxlKCdzY3JhcGVyJywgWyAndWkucm91dGVyJywgJ2FuZ3VsYXJGaWxlVXBsb2FkJywgJ25nU2FuaXRpemUnLCAnbmdDc3YnXSlcblxuXHQuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcblxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci53aGVuKCcnLCAnL2hvbWUnKTtcblx0XHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpXG5cblx0ICBcdCRzdGF0ZVByb3ZpZGVyXG5cdFx0ICAgIC5zdGF0ZSgnaW5kZXgnLCB7XG5cdFx0ICAgICAgdXJsOiBcIi9ob21lXCIsXG4gICAgICBcdFx0ICB0ZW1wbGF0ZVVybDogXCIuL2Fzc2V0cy9sYW5kaW5nLmh0bWxcIlxuXHRcdCAgICB9KVxuXHRcdCAgICAuc3RhdGUoJ3RudCcsIHtcblx0XHQgICAgICB1cmw6IFwiL3RudFwiLFxuXHRcdCAgICAgIHRlbXBsYXRlVXJsOiAnLi9hc3NldHMvcmFkaW8uaHRtbCcsXG5cdFx0ICAgICAgYWJzdHJhY3Q6IHRydWVcblx0XHQgICAgfSlcblx0XHQgICAgLnN0YXRlKCd0bnQudmlldycsIHtcblx0XHQgICAgXHR1cmw6ICcvb3RoZXInLFxuXHRcdFx0XHR2aWV3czoge1xuXHRcdFx0XHRcdCd0bnQnOiB7XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJy4vYXNzZXRzL3RudC5odG1sJyxcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICd0bnQnLFxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAndG50J1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J3RudGxhc3QnOiB7XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJy4vYXNzZXRzL3RudGxhc3QuaHRtbCcsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAndG50bGFzdCcsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd0bnRsYXN0J1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdCAgICB9KVxuXHRcdCAgICAuc3RhdGUoJ3N0YXJ0cmFjaycsIHtcblx0XHQgICAgICB1cmw6IFwiL3N0YXJ0cmFja1wiLFxuICAgICAgXHRcdCAgdGVtcGxhdGVVcmw6IFwiLi9hc3NldHMvc3RhcnRyYWNrLmh0bWxcIixcbiAgICAgIFx0XHQgIGNvbnRyb2xsZXI6IFwic3RhcnRyYWNrXCIsXG4gICAgICBcdFx0ICBjb250cm9sbGVyQXM6IFwic3RhcnRyYWNrXCJcblx0XHQgICAgfSlcblx0fSlcblxuXHQuZmFjdG9yeSgnQWRkJywgZnVuY3Rpb24gKCRodHRwLCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzaGlwOiBmdW5jdGlvbiBzaGlwRmlsZShkYXRhKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdEQVRBIENPTUlORyBJTicpO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbG9hZCcsIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnREFUQSBGSVJFRCBPVVQnKTtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdFx0fSkuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRcdGNvbnNvbGUuaW5mbygnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGV4cG9ydEV4Y2VsOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCRodHRwKHttZXRob2Q6ICdHRVQnLCB1cmw6IFwiL2FwaS9leHBvcnRcIixcblx0XHRcdFx0aGVhZGVyczogeydDb250ZW50LVR5cGUnOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0XCJ9LFxuXHRcdCAgICAgICAgcmVzcG9uc2VUeXBlOiBcImFycmF5YnVmZmVyXCJ9KS4gICAgICAgICAgICAgXG5cdFx0ICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7ICBcblx0XHQgICAgICAgICAgICBzYXZlQXMobmV3IEJsb2IoW2RhdGFdLHt0eXBlOlwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRcIn0pLCBcImV4Y2VsMTExLnhsc3hcIik7XG5cdFx0ICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuXG5cdFx0XHRcdH0pOyAgXG5cdFx0XHR9XG5cblx0XHR9O1xuXHR9KVxuXG4iXX0=
